import {Inline01Component} from './test-12-inlines/inline-01/inline-01.component';

export const notes = [
  ['и вот возник вопрос в каком виде хранить внутреннюю модель заметок.',
    'имееться в виду модель с которой будут работать компоненты.',
    {
      t: 'к ней есть несколько требований:',
      s: [{
        t: 'уведомлять об изменениях - попутно надо разобраться как ngFor это может отрабатывать.',
        s: ['не хотелось-бы, что-бы при редактировании одного символа перестраивался весь UI.']
      },
        'вставка удаление - символа, подпункта, заметки.',
        'синхронизация в нескольких открытых вкладках.']
    }],

  [{
    t: 'и так, основная задача - минимизировать изменения вносимые angular в DOM',
    s: ['а так-же минимизировать действия angular-а по выявлению необходимых изменений из модели.']
  },
    {
      t: 'основное направление - предоставление информации о модификациях',
      s: ['т.е. в любом случае от UI будут идти команды вида добавить/удалить.',
        'по идее механизмы angular должны быть заточенны под такие команды - diff-ы в virtual DOM.',
        'осталось только разобраться, как ngFor-у предоставить эту информацию.',
        '+ возможнно воспользоваться структурами предоставляемыми angular.']
    },
    {
      t: 'как обычно, меня интерисует вопрос - как померять?',
      s: ['другими словами, как зафиксировать модификации производимые angular в DOM?',
        '+ как оценить объём выполненной angular работы?']
    }],

  [{
    t: 'копнул внутрь - получил интересную ссылку',
    s: ['https://vsavkin.com/the-core-concepts-of-angular-2-c3d6cbe04d04',
      'между прочим в ней упоминаються декораторы @HostBinding() и @HostListener']
  },
    'Zones - попался такой термин, с комментарием, Angular uses zones to know when to' +
    ' sync up the component tree with the model, and the DOM with the component tree.',
    {
      t: 'ещё одна многообещающая по названию и введению статья:',
      s: ['https://blog.thoughtram.io/angular/2016/02/22/angular-2-change-detection-explained.html',
        'её начало поставило меня перед переосмыслением функционального подхода с применением angular.',
        'т.е. - есть состояние "большое" - модель данных изменение которой прослушивает angular.',
        {
          t: 'есть события - которые отлавливает angular, и в сущности по которым запускает обработчики...' +
          ' в компонентах либо сервисах расположенные.',
          s: ['разница в компоненте либо сервисе определяеться тем, насколько обширные изменения.',
            'если задеваеться только непосредственное в отображаемой данным компонентом модели - можно оставить в компоненте impure часть.',
            'если затрагиваеться модель более широко - выносить в сервис, который будет получать доступ к нужной части модели.']
        },
        'запущенные события - аналогичны событиям от DOM, и у них можно выделить pure/impure части.',
        'а дальше - всё что пишеться внутри angular (т.е. набор компонентов) должны уметь отображать состояние на экран.']
    },
    {
      t: 'краткий итог по прочтению:',
      s: ['у компонентов есть changeDetection: ChangeDetectionStrategy - коих только 2: обычная и по уведомлению.',
        'у каждого компонента есть свой ChangeDetector.',
        'все ChangeDetector-ы выстроены в дерево и проверяються от корня к листьям.',
        'компонент может получить свой ChangeDetectorRef и через его апи уведомлять angular' +
        ' о своих пожеланиях по поводу проверки изменений.']
    },
    {
      t: 'хотя статья не дала представления о том, как происходит проверка модели данных.',
      s: ['точнее почти не дала - есть слова о том, что по событиям проверяеться всё дерево.',
        'событий - это из DOM, таймеры, завершение запросов - если были привязаны к angular / в его контексте выполнены.']
    },
    {
      t: 'я всё-же уклонился от интерисующих меня вопросов:',
      s: ['есть ли у ngFor какой либо интерфейс для получения информации о изменениях произощедших в списке - можно ли ему подсунуть diff?',
        'как angular проводит проверку модели данных подсоединённой к его компонентам?']
    },
    {
      t: 'вообще-то на последний ответ таки есть, я его просто не заметил сразу:',
      s: ['angular создает код для проверки изменений в модели используя сравнение ссылок, при этом любой глубины для модели.',
        'кстати, тут-же вопрос возникает - а если поля будут добавляться?',
        'что натыкаеться на вопрос - это выходит я биндинги буду динамически дописывать?',
        'но если так - то мне надо будет перестраивать вью, который и будет "дописывать" этот код проверок.']
    }],

  [{
    t: 'и так, моя проблема в том, что я попытался сделать сразу всего слишком много:',
    s: ['начать новый тест - а значит ему и свою реализацию отображения заметок сделать.',
      'выбрать внутреннюю модель данных - в которую простой формат списка-списков строк/объектов' +
      ' преобразовываться будет перед вставкой в angular',
      'разобрать динамические компоненты в angular.']
  },
    'и ясное дело, потерпел провал - слишком много сразу попытался сделать.',
    'и так, разборки по порядку - в начале копию (с минимальными доработками) из предыдущего теста для рендеренга заметок.',
    {
      t: 'далее - динамические компоненты.',
      s: [
        'т.е. я хочу что-бы в notes в объект заметка было добавлено ещё одно поле - ссылка на компонент, который надо врендерить ниже.',
        {
          t: 'есть глава, которая об этом разсказывает: ',
          s: ['https://angular.io/guide/dynamic-component-loader',
            'https://stackblitz.com/angular/bqrydkmlkxg']
        },
        {
          t: 'для примера тут добавлю компонент тестовый.',
          c: Inline01Component
        }]
    },
    {
      t: 'пару комментариев про них:',
      s: ['компоненты которые подгружать, надо отмечать в модуле в секции entryComponents.',
        'к сожалению, в месте использования надо подставлять ссылку на тип компонента.']
    }],

  [
    {
      t: 'в итоге возник вопрос - а что дальше?',
      s: ['компоненты вставлять я хотел, что-бы протестировать 2 варианта уведомлений об обновлении (из заметки 10).',
        'осталось для изменений сделать тесты что хотел.']
    },
    {
      t: 'а какие тесты для изменений стоит сделать?',
      s: ['с ChangeDetectionStrategy.Post',
        'отсоёдинённый компонент - ChangeDetector.detach() - и если у него вызывать detectChanges()' +
        ' - что-бы делать проверку изменений локальную',
        'что там с циклами?']
    },
    'и вопрос как померять - логгировать события на компоненте: OnInit, DoCheck, OnDestroy.',
    '+ вспомнил про желание протестировать добавление/удаление компонентов в сервис... нужно было для навигации между текстовыми блоками.',
    '+ и конечно работа с ngFor - там у него метод интересный есть ngOnChanges() + можно задавать свои стратегии сравнения.',
    {
      t: 'несколько ссылок по теме:',
      s: ['https://netbasal.com/angular-2-ngfor-array-with-unique-values-6b15478d6484',
        'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators',
        'https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_for_of.ts',
        'https://angular.io/api/core/IterableDiffers',
        'https://blog.thoughtram.io/angular/2016/02/22/angular-2-change-detection-explained.html']
    }]
];
